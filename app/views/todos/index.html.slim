h1 Listing todos

table
  thead
    tr
      th Title
      th Content
      th State
      th
      th
      th

  tbody
    - @todos.each do |todo|
      tr
        td = todo.title
        td = todo.content
        td = todo.state
        td = link_to 'Show', todo
        td = link_to 'Edit', edit_todo_path(todo)
        td = link_to 'Destroy', todo, data: { confirm: 'Are you sure?' }, method: :delete

br

= link_to 'New Todo', new_todo_path


h1 Google calendar test
p.alert.alert-danger
  | 毎回、認証ダイアログが出るのが問題
  br
  | tokenはどう保存されるんだろう・・サーバーとかに保存必要ないとか書いてあったが
  br
  | ダイアログには、「すでに一部のアクセス権限を付与されています」とあるので、何かしらの状態を見ればskipできるんじゃないかと思う
  br
  | OAuth同意画面という側面で調べてみるか。サービス全体でGoogleログインしておくと毎回問われないかも
  br
  | 家族のスケジュールを取得するには、calendarId を設定する必要ある？

button id="aaaa" onclick="handleCalenderEventClick()"
  | カレンダー取得
button id="bb" onclick="handleCodeGettingClick()"
  | code取得
button id="authorize_button" onclick="handleAuthClick()"
  | Authorize
button id="signout_button" onclick="handleSignoutClick()"
  | Sign Out

pre#content

javascript:
  // see: https://developers.google.com/calendar/api/quickstart/js

  /* exported gapiLoaded */
  /* exported gisLoaded */
  /* exported handleAuthClick */
  /* exported handleSignoutClick */

  // TODO: 他で定義する
  const CLIENT_ID = '5493614998-ccop2er3riig6j04eauk7e1je3cm8fq6.apps.googleusercontent.com';
  const API_KEY = 'AIzaSyDehKfEoFuP4hiQb3oE2eZ211zrUG-FnYY';

  // Discovery doc URL for APIs used by the quickstart
  const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';

  // Authorization scopes required by the API; multiple scopes can be
  // included, separated by spaces.
  const SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';

  let tokenClient;
  let codeClient;
  let code;
  let gapiInited = false;
  let gisInited = false;

  document.getElementById('authorize_button').style.visibility = 'hidden';
  document.getElementById('signout_button').style.visibility = 'hidden';

  /**
   * Callback after api.js is loaded.
   */
  function gapiLoaded() {
    gapi.load('client', initializeGapiClient);
  }

  /**
   * Callback after the API client is loaded. Loads the
   * discovery doc to initialize the API.
   */
  async function initializeGapiClient() {
    await gapi.client.init({
      apiKey: API_KEY,
      discoveryDocs: [DISCOVERY_DOC],
    });
    gapiInited = true;
    maybeEnableButtons();
  }

  /**
   * Callback after Google Identity Services are loaded.
   */
  function gisLoaded() {
    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: CLIENT_ID,
      scope: SCOPES,
      callback: '', // defined later
    });

    codeClient = google.accounts.oauth2.initCodeClient({
      client_id: CLIENT_ID,
      scope: SCOPES,
      //redirect_uri: 'http://localhost:3000/gcp-oauth-callback', // callback が来ない。localhostだから？
      //redirect_uri: 'https://hm.a-dan.com/gcp-oauth-callback',
      callback: (codeResponse) => {
        console.log(codeResponse);
        code = codeResponse.code;

        var code_receiver_uri = 'http://localhost:3000/gcp-oauth-callback';
          // Send auth code to your backend platform
            const xhr = new XMLHttpRequest();
            xhr.open('POST', code_receiver_uri, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.onload = function() {
              console.log('Signed in as: ' + xhr.responseText);
            };
            xhr.send('code=' + code);
            // After receipt, the code is exchanged for an access token and
            // refresh token, and the platform then updates this web app
            // running in user's browser with the requested calendar info.
      },
    });

    gisInited = true;
    maybeEnableButtons();
  }

  /**
   * Enables user interaction after all libraries are loaded.
   */
  function maybeEnableButtons() {
    if (gapiInited && gisInited) {
      document.getElementById('authorize_button').style.visibility = 'visible';
    }
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick() {
    tokenClient.callback = async (resp) => {
      if (resp.error !== undefined) {
        throw (resp);
      }
      console.log(resp);

      document.getElementById('signout_button').style.visibility = 'visible';
      document.getElementById('authorize_button').innerText = 'Refresh';
      console.log(gapi.client.getToken());
      // await listUpcomingEvents();
    };

    if (gapi.client.getToken() === null) {
      console.log('token is null');
      // Prompt the user to select a Google Account and ask for consent to share their data
      // when establishing a new session.
      tokenClient.requestAccessToken({prompt: 'consent'});
    } else {
      console.log('token is present');
      // Skip display of account chooser and consent dialog for an existing session.
      tokenClient.requestAccessToken({prompt: ''});
    }
  }

  async function handleCalenderEventClick() {
    await listUpcomingEvents();
  }

  function handleCodeGettingClick() {
    var result = codeClient.requestCode();
    console.log(result);
  }

  /**
   *  Sign out the user upon button click.
   */
  function handleSignoutClick() {
    const token = gapi.client.getToken();
    if (token !== null) {
      google.accounts.oauth2.revoke(token.access_token);
      gapi.client.setToken('');
      document.getElementById('content').innerText = '';
      document.getElementById('authorize_button').innerText = 'Authorize';
      document.getElementById('signout_button').style.visibility = 'hidden';
    }
  }

  /**
   * Print the summary and start datetime/date of the next ten events in
   * the authorized user's calendar. If no events are found an
   * appropriate message is printed.
   */
  async function listUpcomingEvents() {
    let response;
    try {
      const request = {
        'calendarId': 'primary',
        'timeMin': (new Date()).toISOString(),
        'showDeleted': false,
        'singleEvents': true,
        'maxResults': 8,
        'orderBy': 'startTime',
      };
      response = await gapi.client.calendar.events.list(request);
    } catch (err) {
      document.getElementById('content').innerText = err.message;
      return;
    }

    const events = response.result.items;
    if (!events || events.length == 0) {
      document.getElementById('content').innerText = 'No events found.';
      return;
    }
    // Flatten to string to display
    const output = events.reduce(
        (str, event) => `${str}${event.summary} (${event.start.dateTime || event.start.date})\n`,
        'Events:\n');
    document.getElementById('content').innerText = output;
  }

script(async="true" defer="true" src="https://apis.google.com/js/api.js" onload="gapiLoaded()")
script(async="true" defer="true" src="https://accounts.google.com/gsi/client" onload="gisLoaded()")
